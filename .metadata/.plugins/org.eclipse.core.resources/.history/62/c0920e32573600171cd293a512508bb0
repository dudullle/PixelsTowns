package pgenerator;

import java.util.ArrayList;
import java.util.Random;

import org.bukkit.BlockChangeDelegate;
import org.bukkit.Chunk;
import org.bukkit.Location;
import org.bukkit.Material;
import org.bukkit.TreeType;
import org.bukkit.World;
import org.bukkit.block.Biome;
import org.bukkit.block.BlockFace;
import org.bukkit.entity.EntityType;
import org.bukkit.generator.BlockPopulator;

public class TreePopulator extends BlockPopulator {

	@Override
	public void populate(World world, Random r, Chunk chunk) {
		int x = chunk.getX()*16;
		int z = chunk.getZ()*16;
		int i = 0;
		for(i = 0; i < 16 ; i++)
		{
			int cx = x + r.nextInt(10);
			int cz = z + r.nextInt(10);
			Biome b = world.getBiome(cx, cz);
			try
			{
				if(b.equals(Biome.FOREST) || b.equals(Biome.BIRCH_FOREST) || b.equals(Biome.ROOFED_FOREST)  ||  b.equals(Biome.MUTATED_FOREST)  || b.equals(Biome.MUTATED_BIRCH_FOREST))
				{
					ArrayList<TreeType> tree = new ArrayList<TreeType>();
					RandomBuild(tree, world,cx,cz,r);
				}
				else if(b.equals(Biome.OCEAN) || b.equals(Biome.DEEP_OCEAN))
				{

				}else if(b.equals(Biome.SAVANNA) || b.equals(Biome.PLAINS))
				{
					world.generateTree(new Location(world, cx, world.getHighestBlockYAt(cx, cz),cz), TreeType.ACACIA);
				}else if(b.equals(Biome.BEACHES) || b.equals(Biome.SWAMPLAND))
				{

				}else if(b.equals(Biome.RIVER))
				{
					
				}
					
			}catch(Exception Ex)
			{

			}
		}
	}
	public void RandomBuild(ArrayList<TreeType> tree, World w , int x,int z, Random r)
	{
		w.generateTree(new Location(w, x, w.getHighestBlockYAt(x, z),z), tree.get(r.nextInt(tree.size())));
	}
}


